/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]


total permutation = n!--> for n=3 permutaion will be 6
*/

class Solution {
private:
    void solve(vector<int> nums , vector<vector<int>> &ans,int index){
        //base case
        if(index >= nums.size()){
            ans.push_back(nums);
            return;
        }

        for(int j = index; j<nums.size();j++){
            //swap j and index
            swap(nums[j],nums[index]);
            //recursion call for index+1
            solve(nums,ans,index+1);
            //backtracking 
            /*because after 123 turned into 213 we need 123 back to perform swap on other index*/
            swap(nums[j],nums[index]);
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int index=0;
        vector<vector<int>> ans;
        solve(nums,ans,index);
        return ans;
        
    }
};
