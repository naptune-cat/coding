/*
Your task is to reverse the order of each group of 'k' consecutive nodes, if 'n' is not divisible by 'k', then the last group of nodes should remain unchanged.



For example, if the linked list is 1->2->3->4->5, and 'k' is 3, we have to reverse the first three elements, and leave the last two elements unchanged. Thus, the final linked list being 3->2->1->4->5.
*/


/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
 

Node* kReverse(Node* head, int k) {
    // base case
    if(head==NULL ){
        return NULL;
    }
    int len=0;
    Node* temp=head;
    Node* forward=NULL;
    Node* curr=head;
    Node* prev=NULL;
    int count=0;
    //counting length of LL
    while(temp!=NULL){
        len++;
        temp=temp->next;
    }
    //reverse first k elements in LL
    while(curr!=NULL && count<k){
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
        count++;
        len--;
    }
    //recurrsion call
    if(forward!=NULL){
        if(len>=k){
            head->next = kReverse(forward,k);
        }
         else{
            head->next=forward;
         }
    } 
    //return head of reversed list
        return prev;
}
