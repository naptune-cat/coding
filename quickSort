#include <bits/stdc++.h> 

int partition(vector<int> &arr,int s,int e){

    int pivot = arr[s];
    int count=0;
    int pivotIndex=s;
   for(int i=s+1;i<=e;i++){
       if(arr[i]<=pivot){
           count++;
       }
   }

   int rightpivotIndex=s+count;
   swap(arr[pivotIndex],arr[rightpivotIndex]);

   int i=s,j=e;
pivotIndex=rightpivotIndex;
   while(i<pivotIndex && j>pivotIndex){
       while(arr[i]<=pivot){
           i++;
       }
       while(arr[j]> pivot){
           j--;
       }
       if(i<rightpivotIndex && j>rightpivotIndex){
           swap(arr[i],arr[j]);
       }
   }
   return pivotIndex;
}
void solve(vector<int> &arr,int s,int e){
   if (s>=e)
    return;
    // partition pivot
    int p = partition(arr, s, e);
    // recursion
    // left part sort
    solve(arr, s, p - 1);
    // right part sort
    solve(arr, p + 1, e);
   
  
}

vector<int> quickSort(vector<int> arr)
{
    solve(arr,0,arr.size()-1);
  
    return arr;

}
