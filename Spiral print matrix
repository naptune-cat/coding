#include <bits/stdc++.h> 
vector<int> spiralPathMatrix(vector<vector<int>> matrix, int n, int m) 
{
  
    int count=0,total=n*m;
    vector<int> ans;
    int startRow=0;
    int startCol=0;
    int endingRow = n-1;
    int endingCol = m-1;
    while(count < total){
        //print first row
        
        for(int i=startCol ;i<=endingCol && count < total;i++){
            ans.push_back(matrix[startRow][i]);
            count++;
        }
        startRow++;

        //then print last col
        for(int i=startRow;i<=endingRow && count < total;i++){
            ans.push_back(matrix[i][endingCol]);
            count++;
        }
        endingCol--;

        //print ending row
          for(int i=endingCol;i>=startCol && count < total;i--){
            ans.push_back(matrix[endingRow][i]);
            count++;
        }
        endingRow--;

        //print starting col
        for(int i=endingRow;i>=startRow && count < total;i--){
            ans.push_back(matrix[i][startCol]);
            count++;
        }
        startCol++;
    }
    return ans;
}





//solve by own
// Online C++ compiler to run C++ program online
#include <iostream>
#include <vector>
using namespace std;

void Spriralprint(vector<vector<int>> m,int row,int col){
    int total=row*col;
    int StartRow=0,startCol=0,endRow=row-1,endCol=col-1;
    int count =0;
    while(count < total){
        for(int i=startCol;i<=endCol;i++){
            
        }
    }
}
int main() {
    vector<vector<int>> matrix;
    int row,col;
    cin>>row>>col;
    for(int i=0;i<row;i++){
    vector<int>temp;
    for(int j=0;j<col;j++){
    int val;
    cin>>val;
    temp.push_back(val);
    }
    matrix.push_back(temp);
    }
    
    Spiralprint(matrix,row,col);
        return 0;
}
